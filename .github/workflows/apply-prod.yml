name: 프로덕션 인프라 배포

on:
  workflow_dispatch:
env:
  CHANNEL: prod
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
jobs:
  apply-base:
    strategy:
      matrix:
        module: ["network", "codedeploy", "container-registry"]
    name: "Apply base layer"
    if: github.repository == '9U-ReQuest/infra'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ matrix.module }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Terraform Init
        run: |
          terraform init
          terraform workspace select -or-create ${{ env.CHANNEL }}
      - name: Terraform plan
        run: terraform plan
      - name: Terraform apply
        run: terraform apply -auto-approve
      - name: Generate output from terraform
        id: generate-output
        run: |
          terraform output -json | jq -c .
      - name: Install libsodium-wrappers
        working-directory: ./
        run: |
          npm install libsodium-wrappers
      - name: Store output into organization variable
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ORG_SECRET_GITHUB_TOKEN }}
          script: |
            const sodium = require('libsodium-wrappers');

            const secret_name = `${{ matrix.module }}_outputs_${{ env.CHANNEL }}`.replace('-', '_');
            const secret = `${{ steps.generate-output.outputs.stdout }}`;
            console.log(secret_name);
            const publicKey = github.rest.actions.getOrgPublicKey({ org: '9U-ReQuest' }).then((publicKey) => {
              sodium.ready.then(() => {
                const binKey = sodium.from_base64(publicKey.data.key, sodium.base64_variants.ORIGINAL);
                const binSec = sodium.from_string(secret);

                const encBytes = sodium.crypto_box_seal(binSec, binKey);

                const output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL);
                github.rest.actions.createOrUpdateOrgSecret({
                  org: '9U-ReQuest',
                  secret_name,
                  encrypted_value: output,
                  key_id: publicKey.data.key_id,
                  visibility: 'all'
                });
              });
            });
  apply-applications:
    needs: apply-base
    strategy:
      matrix:
        module: ["gasi", "agi"]
    name: "Apply applications"
    if: github.repository == '9U-ReQuest/infra'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ matrix.module }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Terraform Init
        run: |
          terraform init
          terraform workspace select -or-create ${{ env.CHANNEL }}
      - name: Terraform plan
        run: terraform plan
      - name: Terraform apply
        run: terraform apply -auto-approve
      - name: Generate output from terraform
        id: generate-output
        run: |
          terraform output -json | jq -c .
      - name: Install libsodium-wrappers
        working-directory: ./
        run: |
          npm install libsodium-wrappers
      - name: Store output into organization variable
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ORG_SECRET_GITHUB_TOKEN }}
          script: |
            const sodium = require('libsodium-wrappers');

            const secret_name = `${{ matrix.module }}_outputs_${{ env.CHANNEL }}`.replace('-', '_');
            const secret = `${{ steps.generate-output.outputs.stdout }}`;
            console.log(secret_name);
            const publicKey = github.rest.actions.getOrgPublicKey({ org: '9U-ReQuest' }).then((publicKey) => {
              sodium.ready.then(() => {
                const binKey = sodium.from_base64(publicKey.data.key, sodium.base64_variants.ORIGINAL);
                const binSec = sodium.from_string(secret);

                const encBytes = sodium.crypto_box_seal(binSec, binKey);

                const output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL);
                github.rest.actions.createOrUpdateOrgSecret({
                  org: '9U-ReQuest',
                  secret_name,
                  encrypted_value: output,
                  key_id: publicKey.data.key_id,
                  visibility: 'all'
                });
              });
            });
